generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  comments      Comment[]
  posts         Post[]
  sessions      Session[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Section {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  posts     Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sectionId Int
  userId    String
  title     String
  content   String
  section   Section   @relation(fields: [sectionId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    String
  postId    Int?
  parentId  Int?
  content   String
  parent    Comment?  @relation("ParentChildren", fields: [parentId], references: [id])
  post      Post?     @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  children  Comment[] @relation("ParentChildren")
  votes     Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  voteType  VoteType
  userId    String
  postId    Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
