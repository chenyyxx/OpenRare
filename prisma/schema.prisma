// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}



model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  // @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  comments      Comment[]
  subComments   SubComment[]
  posts         Post[]
  sectionIDs    String[]  @db.ObjectId
  sections      Section[] @relation(fields: [sectionIDs], references: [id])
  sessions      Session[]
  votes         Vote[]

  // @@map("users")
}

model VerificationToken {
  // id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  // @@map("verificationtokens")

}

model Section {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  name            String   @unique
  posts           Post[]
  definition      String
  description     String
  picture         String
  userIDs         String[] @db.ObjectId
  users           User[]   @relation(fields: [userIDs], references: [id])
}


model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sectionId String    @db.ObjectId
  userId    String    @db.ObjectId
  title     String
  content   String
  section   Section   @relation(fields: [sectionId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  userId      String
  postId      String?   @db.ObjectId
  content     String
  post        Post?     @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  votes       Vote[]
  subComments SubComment[]
}

model SubComment {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  userId      String
  content     String
  commentId   String       @db.ObjectId
  comment     Comment      @relation(fields: [commentId], references: [id])
  
  parentId    String?      @db.ObjectId
  parent      SubComment?  @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    SubComment[] @relation("ParentChildren")

  user        User         @relation(fields: [userId], references: [id])
  votes       Vote[]
}


model Vote {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  voteType      VoteType
  userId        String      @db.ObjectId
  postId        String?     @db.ObjectId
  commentId     String?     @db.ObjectId
  comment       Comment?    @relation(fields: [commentId], references: [id])
  subCommentId  String?     @db.ObjectId
  subComment    SubComment? @relation(fields: [subCommentId], references: [id])
  post          Post?       @relation(fields: [postId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

// enum CommentType {
//   COMMENTCOMMENT
//   COMMENT
//   COMMENTSUBCOMMENT
// }
